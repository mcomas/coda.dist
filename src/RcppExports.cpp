// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ilr_basis
arma::mat ilr_basis(unsigned int dim);
RcppExport SEXP _coda_dist_ilr_basis(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(ilr_basis(dim));
    return rcpp_result_gen;
END_RCPP
}
// ilr_coordinates
arma::mat ilr_coordinates(arma::mat X);
RcppExport SEXP _coda_dist_ilr_coordinates(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(ilr_coordinates(X));
    return rcpp_result_gen;
END_RCPP
}
// inv_ilr_coordinates
arma::mat inv_ilr_coordinates(arma::mat ilrX);
RcppExport SEXP _coda_dist_inv_ilr_coordinates(SEXP ilrXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type ilrX(ilrXSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_ilr_coordinates(ilrX));
    return rcpp_result_gen;
END_RCPP
}
// ilr_to_alr
arma::mat ilr_to_alr(arma::mat ILR);
RcppExport SEXP _coda_dist_ilr_to_alr(SEXP ILRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type ILR(ILRSEXP);
    rcpp_result_gen = Rcpp::wrap(ilr_to_alr(ILR));
    return rcpp_result_gen;
END_RCPP
}
// alr_to_ilr
arma::mat alr_to_ilr(arma::mat ALR);
RcppExport SEXP _coda_dist_alr_to_ilr(SEXP ALRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type ALR(ALRSEXP);
    rcpp_result_gen = Rcpp::wrap(alr_to_ilr(ALR));
    return rcpp_result_gen;
END_RCPP
}
// ddm
double ddm(arma::vec x, arma::vec alpha);
RcppExport SEXP _coda_dist_ddm(SEXP xSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(ddm(x, alpha));
    return rcpp_result_gen;
END_RCPP
}
// c_dm_fit
Rcpp::List c_dm_fit(arma::mat X, double eps, int maxiter);
RcppExport SEXP _coda_dist_c_dm_fit(SEXP XSEXP, SEXP epsSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(c_dm_fit(X, eps, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// c_dm_fit_alpha
arma::vec c_dm_fit_alpha(arma::mat X, double eps, int maxiter);
RcppExport SEXP _coda_dist_c_dm_fit_alpha(SEXP XSEXP, SEXP epsSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(c_dm_fit_alpha(X, eps, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// validate_dnm
double validate_dnm(arma::vec x, arma::vec mu, arma::mat sigma, unsigned int order);
RcppExport SEXP _coda_dist_validate_dnm(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(validate_dnm(x, mu, sigma, order));
    return rcpp_result_gen;
END_RCPP
}
// dnm
double dnm(arma::vec x, arma::vec mu, arma::mat sigma, unsigned int order);
RcppExport SEXP _coda_dist_dnm(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(dnm(x, mu, sigma, order));
    return rcpp_result_gen;
END_RCPP
}
// m1_dnm
arma::vec m1_dnm(arma::vec x, arma::vec mu, arma::mat sigma, unsigned int order);
RcppExport SEXP _coda_dist_m1_dnm(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(m1_dnm(x, mu, sigma, order));
    return rcpp_result_gen;
END_RCPP
}
// m2_dnm
arma::mat m2_dnm(arma::vec x, arma::vec mu, arma::mat sigma, unsigned int order);
RcppExport SEXP _coda_dist_m2_dnm(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(m2_dnm(x, mu, sigma, order));
    return rcpp_result_gen;
END_RCPP
}
// hermite_integration
double hermite_integration(unsigned int order, unsigned int d);
RcppExport SEXP _coda_dist_hermite_integration(SEXP orderSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(hermite_integration(order, d));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_hermite
arma::mat gaussian_hermite(int order, arma::vec mu, arma::mat sigma);
RcppExport SEXP _coda_dist_gaussian_hermite(SEXP orderSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_hermite(order, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// hermite
arma::mat hermite(int order);
RcppExport SEXP _coda_dist_hermite(SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(hermite(order));
    return rcpp_result_gen;
END_RCPP
}
// lpnm_join_no_constant
double lpnm_join_no_constant(arma::vec x, arma::vec mu, arma::mat inv_sigma, arma::vec p, arma::vec h);
RcppExport SEXP _coda_dist_lpnm_join_no_constant(SEXP xSEXP, SEXP muSEXP, SEXP inv_sigmaSEXP, SEXP pSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inv_sigma(inv_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(lpnm_join_no_constant(x, mu, inv_sigma, p, h));
    return rcpp_result_gen;
END_RCPP
}
// expected_hermite
Rcpp::List expected_hermite(arma::vec x, arma::vec mu_ilr, arma::mat sigma_ilr, int order);
RcppExport SEXP _coda_dist_expected_hermite(SEXP xSEXP, SEXP mu_ilrSEXP, SEXP sigma_ilrSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_ilr(mu_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_ilr(sigma_ilrSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(expected_hermite(x, mu_ilr, sigma_ilr, order));
    return rcpp_result_gen;
END_RCPP
}
// expected_montecarlo_01
Rcpp::List expected_montecarlo_01(arma::vec x, arma::vec mu_ilr, arma::mat sigma_ilr, arma::mat Z, arma::vec mu_exp);
RcppExport SEXP _coda_dist_expected_montecarlo_01(SEXP xSEXP, SEXP mu_ilrSEXP, SEXP sigma_ilrSEXP, SEXP ZSEXP, SEXP mu_expSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_ilr(mu_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_ilr(sigma_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_exp(mu_expSEXP);
    rcpp_result_gen = Rcpp::wrap(expected_montecarlo_01(x, mu_ilr, sigma_ilr, Z, mu_exp));
    return rcpp_result_gen;
END_RCPP
}
// expected_montecarlo_02
arma::mat expected_montecarlo_02(arma::vec x, arma::vec mu_ilr, arma::mat sigma_ilr, arma::mat Z, arma::vec mu_exp, double var_exp);
RcppExport SEXP _coda_dist_expected_montecarlo_02(SEXP xSEXP, SEXP mu_ilrSEXP, SEXP sigma_ilrSEXP, SEXP ZSEXP, SEXP mu_expSEXP, SEXP var_expSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_ilr(mu_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_ilr(sigma_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_exp(mu_expSEXP);
    Rcpp::traits::input_parameter< double >::type var_exp(var_expSEXP);
    rcpp_result_gen = Rcpp::wrap(expected_montecarlo_02(x, mu_ilr, sigma_ilr, Z, mu_exp, var_exp));
    return rcpp_result_gen;
END_RCPP
}
// expected_montecarlo_03
Rcpp::List expected_montecarlo_03(arma::vec x, arma::vec mu_ilr, arma::mat sigma_ilr, arma::mat Z, arma::vec mu_sampling, arma::mat sigma_sampling);
RcppExport SEXP _coda_dist_expected_montecarlo_03(SEXP xSEXP, SEXP mu_ilrSEXP, SEXP sigma_ilrSEXP, SEXP ZSEXP, SEXP mu_samplingSEXP, SEXP sigma_samplingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_ilr(mu_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_ilr(sigma_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_sampling(mu_samplingSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_sampling(sigma_samplingSEXP);
    rcpp_result_gen = Rcpp::wrap(expected_montecarlo_03(x, mu_ilr, sigma_ilr, Z, mu_sampling, sigma_sampling));
    return rcpp_result_gen;
END_RCPP
}
// expected_montecarlo_04
Rcpp::List expected_montecarlo_04(arma::vec x, arma::vec mu_ilr, arma::mat sigma_ilr, arma::mat Z, arma::vec m1, arma::mat m2);
RcppExport SEXP _coda_dist_expected_montecarlo_04(SEXP xSEXP, SEXP mu_ilrSEXP, SEXP sigma_ilrSEXP, SEXP ZSEXP, SEXP m1SEXP, SEXP m2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_ilr(mu_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_ilr(sigma_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type m2(m2SEXP);
    rcpp_result_gen = Rcpp::wrap(expected_montecarlo_04(x, mu_ilr, sigma_ilr, Z, m1, m2));
    return rcpp_result_gen;
END_RCPP
}
// expected_metropolis
Rcpp::List expected_metropolis(arma::vec x, arma::vec mu_ilr, arma::mat sigma_ilr, arma::vec mu_exp, int nsim, int ignored_steps);
RcppExport SEXP _coda_dist_expected_metropolis(SEXP xSEXP, SEXP mu_ilrSEXP, SEXP sigma_ilrSEXP, SEXP mu_expSEXP, SEXP nsimSEXP, SEXP ignored_stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_ilr(mu_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_ilr(sigma_ilrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_exp(mu_expSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< int >::type ignored_steps(ignored_stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(expected_metropolis(x, mu_ilr, sigma_ilr, mu_exp, nsim, ignored_steps));
    return rcpp_result_gen;
END_RCPP
}
// mvf_deriv
double mvf_deriv(int I, arma::vec a, arma::vec mu, arma::mat inv_sigma, arma::vec x);
RcppExport SEXP _coda_dist_mvf_deriv(SEXP ISEXP, SEXP aSEXP, SEXP muSEXP, SEXP inv_sigmaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inv_sigma(inv_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mvf_deriv(I, a, mu, inv_sigma, x));
    return rcpp_result_gen;
END_RCPP
}
// mvf_deriv2
double mvf_deriv2(int I, int J, arma::vec a, arma::vec mu, arma::mat inv_sigma, arma::vec x);
RcppExport SEXP _coda_dist_mvf_deriv2(SEXP ISEXP, SEXP JSEXP, SEXP aSEXP, SEXP muSEXP, SEXP inv_sigmaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inv_sigma(inv_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mvf_deriv2(I, J, a, mu, inv_sigma, x));
    return rcpp_result_gen;
END_RCPP
}
// alr_basis
arma::mat alr_basis(int K);
RcppExport SEXP _coda_dist_alr_basis(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(alr_basis(K));
    return rcpp_result_gen;
END_RCPP
}
// mvf_maximum
arma::vec mvf_maximum(arma::vec x, arma::vec mu_ilr, arma::mat sigma_ilr, arma::mat B, double eps, int max_iter, double prop);
RcppExport SEXP _coda_dist_mvf_maximum(SEXP xSEXP, SEXP mu_ilrSEXP, SEXP sigma_ilrSEXP, SEXP BSEXP, SEXP epsSEXP, SEXP max_iterSEXP, SEXP propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_ilr(mu_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_ilr(sigma_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type prop(propSEXP);
    rcpp_result_gen = Rcpp::wrap(mvf_maximum(x, mu_ilr, sigma_ilr, B, eps, max_iter, prop));
    return rcpp_result_gen;
END_RCPP
}
// ldnormal
arma::vec ldnormal(arma::mat H, arma::vec mu, arma::mat inv_sigma);
RcppExport SEXP _coda_dist_ldnormal(SEXP HSEXP, SEXP muSEXP, SEXP inv_sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inv_sigma(inv_sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(ldnormal(H, mu, inv_sigma));
    return rcpp_result_gen;
END_RCPP
}
// lpmultinomial_const
double lpmultinomial_const(arma::vec x);
RcppExport SEXP _coda_dist_lpmultinomial_const(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(lpmultinomial_const(x));
    return rcpp_result_gen;
END_RCPP
}
// lpmultinomial
double lpmultinomial(arma::vec x, arma::vec p, double lconst);
RcppExport SEXP _coda_dist_lpmultinomial(SEXP xSEXP, SEXP pSEXP, SEXP lconstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type lconst(lconstSEXP);
    rcpp_result_gen = Rcpp::wrap(lpmultinomial(x, p, lconst));
    return rcpp_result_gen;
END_RCPP
}
// lpnm_join
arma::mat lpnm_join(arma::vec x, arma::vec mu, arma::mat inv_sigma, arma::mat P, arma::mat H);
RcppExport SEXP _coda_dist_lpnm_join(SEXP xSEXP, SEXP muSEXP, SEXP inv_sigmaSEXP, SEXP PSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inv_sigma(inv_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(lpnm_join(x, mu, inv_sigma, P, H));
    return rcpp_result_gen;
END_RCPP
}
// lpmultinomial_mult
arma::vec lpmultinomial_mult(arma::mat P, arma::vec x);
RcppExport SEXP _coda_dist_lpmultinomial_mult(SEXP PSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(lpmultinomial_mult(P, x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_coda_dist_ilr_basis", (DL_FUNC) &_coda_dist_ilr_basis, 1},
    {"_coda_dist_ilr_coordinates", (DL_FUNC) &_coda_dist_ilr_coordinates, 1},
    {"_coda_dist_inv_ilr_coordinates", (DL_FUNC) &_coda_dist_inv_ilr_coordinates, 1},
    {"_coda_dist_ilr_to_alr", (DL_FUNC) &_coda_dist_ilr_to_alr, 1},
    {"_coda_dist_alr_to_ilr", (DL_FUNC) &_coda_dist_alr_to_ilr, 1},
    {"_coda_dist_ddm", (DL_FUNC) &_coda_dist_ddm, 2},
    {"_coda_dist_c_dm_fit", (DL_FUNC) &_coda_dist_c_dm_fit, 3},
    {"_coda_dist_c_dm_fit_alpha", (DL_FUNC) &_coda_dist_c_dm_fit_alpha, 3},
    {"_coda_dist_validate_dnm", (DL_FUNC) &_coda_dist_validate_dnm, 4},
    {"_coda_dist_dnm", (DL_FUNC) &_coda_dist_dnm, 4},
    {"_coda_dist_m1_dnm", (DL_FUNC) &_coda_dist_m1_dnm, 4},
    {"_coda_dist_m2_dnm", (DL_FUNC) &_coda_dist_m2_dnm, 4},
    {"_coda_dist_hermite_integration", (DL_FUNC) &_coda_dist_hermite_integration, 2},
    {"_coda_dist_gaussian_hermite", (DL_FUNC) &_coda_dist_gaussian_hermite, 3},
    {"_coda_dist_hermite", (DL_FUNC) &_coda_dist_hermite, 1},
    {"_coda_dist_lpnm_join_no_constant", (DL_FUNC) &_coda_dist_lpnm_join_no_constant, 5},
    {"_coda_dist_expected_hermite", (DL_FUNC) &_coda_dist_expected_hermite, 4},
    {"_coda_dist_expected_montecarlo_01", (DL_FUNC) &_coda_dist_expected_montecarlo_01, 5},
    {"_coda_dist_expected_montecarlo_02", (DL_FUNC) &_coda_dist_expected_montecarlo_02, 6},
    {"_coda_dist_expected_montecarlo_03", (DL_FUNC) &_coda_dist_expected_montecarlo_03, 6},
    {"_coda_dist_expected_montecarlo_04", (DL_FUNC) &_coda_dist_expected_montecarlo_04, 6},
    {"_coda_dist_expected_metropolis", (DL_FUNC) &_coda_dist_expected_metropolis, 6},
    {"_coda_dist_mvf_deriv", (DL_FUNC) &_coda_dist_mvf_deriv, 5},
    {"_coda_dist_mvf_deriv2", (DL_FUNC) &_coda_dist_mvf_deriv2, 6},
    {"_coda_dist_alr_basis", (DL_FUNC) &_coda_dist_alr_basis, 1},
    {"_coda_dist_mvf_maximum", (DL_FUNC) &_coda_dist_mvf_maximum, 7},
    {"_coda_dist_ldnormal", (DL_FUNC) &_coda_dist_ldnormal, 3},
    {"_coda_dist_lpmultinomial_const", (DL_FUNC) &_coda_dist_lpmultinomial_const, 1},
    {"_coda_dist_lpmultinomial", (DL_FUNC) &_coda_dist_lpmultinomial, 3},
    {"_coda_dist_lpnm_join", (DL_FUNC) &_coda_dist_lpnm_join, 5},
    {"_coda_dist_lpmultinomial_mult", (DL_FUNC) &_coda_dist_lpmultinomial_mult, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_coda_dist(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
